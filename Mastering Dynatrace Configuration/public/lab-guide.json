[{"id":"1","name":"Mastering Dynatrace Configuration ","content":"<h2 id=\"masteringdynatraceconfiguration\">Mastering Dynatrace Configuration</h2>\n<p><strong>Tagging, Host Groups, Network Zones and more</strong></p>\n<p>Start your journey to becoming a master of Dynatrace configuration and find more free time in your day-to-day. This module teaches attendees how to master Dynatrace configuration using hands on activities that will cover tagging (manual, automatic, and 3rd party aka cloud provider), how to follow best practices, management zones, simplify your searching using tag and management zone filtering, interact with the Dynatrace RESTful \nAPI, deploy code changes to AWS and much more.</p>\n<p>Please follow each step throughout each training module, most steps are required for the next module.</p>\n<p>In this session, you'll learn how to:</p>\n<ul>\n<li>Configure an environment using best practices</li>\n<li>Manage Dynatrace from an automation-first approach</li>\n<li>Use advanced features to provide metadata and properties</li>\n<li>Understand cloud provider tags to enrich entities</li>\n<li>Filter using cloud provider tags</li>\n<li>Learn about the Dynatrace RESTful API</li>\n<li>Read and write data within Dynatrace</li>\n<li>Demonstrate application deployments and monitoring using a provided AWS and Dynatrace platform</li>\n</ul>","activityList":[]},{"id":"2","name":"Setup Environment","content":"<h2 id=\"setupenvironment\">Setup Environment</h2>\n<p>In this module, you will complete the setup of your training environment. Each student gets a unique training environment. </p>\n<p>In this module you will go through the following actions:</p>\n<ol>\n<li>Access your personal Dynatrace Environment</li>\n<li>Access your personal EKS Bastion Host</li>\n<li>Download a local copy of the training repository</li>\n<li>Verify successful download</li>\n</ol>","activityList":[{"id":"2.1","name":"Access environments","content":"<h2 id=\"accessenvironments\">Access environments</h2>\n<p>Log into Dynatrace University using an incognito window or make sure you are not logged into any other Dynatrace environment.</p>\n<p>https://university.dynatrace.com/</p>\n<p>Once you are logged in, navigate to this event and click on the Environments tab.  This will show your lab environments. Initially you might see a \"See details\" button, simply click it to see your environment details.</p>\n<p><img src=\"assets/dtuenvi.png\" alt=\"dtuenvi\" /></p>\n<p>1st we will access your personal Dynatrace environment:</p>\n<pre><code class=\"hljs\">   Action: Using <span class=\"hljs-string\">&quot;Dynatrace Environment&quot;</span> section, hover over your Username, click <span class=\"hljs-keyword\">the</span> <span class=\"hljs-string\">&quot;copy icon&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;View environment&quot;</span>, <span class=\"hljs-keyword\">a</span> <span class=\"hljs-built_in\">new</span> browser <span class=\"hljs-literal\">tab</span> will be opened\n   Action: Paste your username <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">the</span> Dynatrace E-mail field, click Next\n</code></pre>\n<p><img src=\"assets/dtemail.png\" alt=\"dtemail\" /></p>\n<pre><code class=\"hljs\">   Action: Toggle back <span class=\"hljs-built_in\">to</span> <span class=\"hljs-keyword\">the</span> My Events | Dynatrace University <span class=\"hljs-literal\">tab</span> <span class=\"hljs-keyword\">in</span> your browser\n   Action: Hover over your Password, click <span class=\"hljs-keyword\">the</span> <span class=\"hljs-string\">&quot;copy icon&quot;</span>.\n   Action: Toggle back <span class=\"hljs-built_in\">to</span> <span class=\"hljs-keyword\">the</span> Login|Dynatrace <span class=\"hljs-literal\">tab</span> <span class=\"hljs-keyword\">in</span> your browser\n   Action: Paste your password <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">the</span> Dynatrace password field\n   Action: Check <span class=\"hljs-keyword\">the</span> Remember me checkbox, click Login\n</code></pre>\n<p><img src=\"assets/dtpass.png\" alt=\"dtpass\" /></p>\n<p>Now we will access your personal EKS Bastion Host:</p>\n<pre><code class=\"hljs\">   Action: Toggle back <span class=\"hljs-built_in\">to</span> <span class=\"hljs-keyword\">the</span> My Events | Dynatrace University <span class=\"hljs-literal\">tab</span> <span class=\"hljs-keyword\">in</span> your browser\n   Action: Using <span class=\"hljs-string\">&quot;EKS Bastion Host&quot;</span> section, hover over your Username <span class=\"hljs-keyword\">and</span> click <span class=\"hljs-keyword\">on</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">copy</span> <span class=\"hljs-title\">icon</span>.\n   Action: Click <span class=\"hljs-string\">&quot;Open terminal&quot;</span>, this will <span class=\"hljs-built_in\">open</span> <span class=\"hljs-keyword\">a</span> <span class=\"hljs-built_in\">new</span> bastion terminal console <span class=\"hljs-keyword\">in</span> this <span class=\"hljs-literal\">tab</span>\n</code></pre>\n<p><img src=\"assets/bh.png\" alt=\"bh\" /></p>\n<p>Note your EasyTrade URL</p>\n<pre><code class=\"hljs\">   Action: Copy <span class=\"hljs-keyword\">and</span> paste this <span class=\"hljs-built_in\">URL</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">a</span> <span class=\"hljs-built_in\">new</span> browser window so you can easily access <span class=\"hljs-keyword\">it</span> later.\n   Action: Toggle back <span class=\"hljs-built_in\">to</span> <span class=\"hljs-keyword\">the</span> My Events | Dynatrace University <span class=\"hljs-literal\">tab</span> <span class=\"hljs-keyword\">in</span> your browser\n</code></pre>","activityList":[]},{"id":"2.2","name":"Download scripts","content":"<h2 id=\"downloadscripts\">Download scripts</h2>\n<p>To begin let's start in your Bastion terminal. Let's make sure we start in the right location.  </p>\n<ul>\n<li>Run the following command:</li>\n</ul>\n<pre><code class=\"hljs\">   <span class=\"hljs-built_in\">cd</span> ~\n</code></pre>\n<ul>\n<li>Next step is to locally clone the training repository from github:</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   git <span class=\"hljs-built_in\">clone</span> https://github.com/stratuscoder/perform-2023-mastering-dynatrace-configuration.git\n</code></pre>\n<ul>\n<li>Navigate to the newly cloned directory:</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   <span class=\"hljs-built_in\">cd</span> ~/perform-2023-mastering-dynatrace-configuration\n</code></pre>\n<ul>\n<li>Finally, review the folder contents:</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   ls\n</code></pre>\n<p>The contents should look similiar to the following:</p>\n<pre><code class=\"hljs bash language-bash\">   <span class=\"hljs-string\">&quot;README.md  easyTrade  scriptsâ€‹&quot;</span>\n</code></pre>\n<p>Now you have a local copy of the tools required for this training.</p>","activityList":[]}]},{"id":"3","name":"Verify Setup","content":"<h2 id=\"verifysetup\">Verify Setup</h2>\n<p>In this module, you will verify that the setup completed successfully in your training environment. You will use some of what you learned about Kubernetes in this module and you will check connectivity in your Dynatrace UI.</p>\n<p>In this module you will go through the following actions:</p>\n<ol>\n<li>Test the easyTrade application</li>\n<li>Verify Dynatrace is monitoring the application services, hosts, etc.</li>\n</ol>","activityList":[{"id":"3.1","name":"easyTrade Application","content":"<h2 id=\"easytradeapplication\">easyTrade Application</h2>\n<p>The easyTrade application should already be running in your environment, let's take some time to use our <em>kubectl</em> knowledge to get the public IP address of our easyTrade application.</p>\n<ul>\n<li>In your Bastion terminal let's list the easyTrade services in Kubernetes:</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   kubectl get svc -n easyTrade\n\n   OR use the built-in script:\n\n   sh ~/perform-2023-mastering-dynatrace-configuration/scripts/get-svc.sh\n</code></pre>\n<p>Your output should show a list of the kubernetes services similiar to the following:</p>\n<pre><code class=\"hljs bash language-bash\"> NAME                 TYPE          CLUSTER-IP      EXTERNAL-IP                                     PORT(S)       AGE\n brokerservice        ClusterIP     172.20.154.224  &lt;none&gt;                                          80/TCP        12m\n db                   ClusterIP     172.20.154.224  &lt;none&gt;                                          1433/TCP      12m\n frontend             ClusterIP     172.20.154.224  &lt;none&gt;                                          3000/TCP      12m\n frontendreverseproxy LoadBalancer  172.20.154.224  djks480054kskd-2494.us-west-2.elb.amazonaws.com 80:32731/TCP  12m\n</code></pre>\n<p>Look for the name <strong>frontendreverseproxy</strong> and the type <strong>LoadBalancer</strong> with an external IP that ends with <strong>elb.amazonaws.com</strong>.  </p>\n<ul>\n<li>Copy the EXTERNAL-IP address and paste in into your browser to test it.</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Copy the external IP address and paste into your browser.\n</code></pre>\n<ul>\n<li>If you see a Login page it is working properly. You can register a fake account to further test the easyTrade appliction. </li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Register a fake account\n</code></pre>\n<p><strong>FYI</strong> - None of the fields are validated so you can type anything you want for your account details:</p>","activityList":[]},{"id":"3.2","name":"Check Dynatrace monitoring","content":"<h2 id=\"checkdynatracemonitoring\">Check Dynatrace monitoring</h2>\n<p>Now that we know the application is running, we need to switch over to Dynatrace and see if the easyTrade application is being monitored.</p>\n<h4 id=\"areasindynatracetoviewfromtheleftnavigationmenu\">Areas in Dynatrace to view from the left navigation menu</h4>\n<ul>\n<li>Navigate to Infrastructure - Hosts</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Hosts&quot;</span> page\n</code></pre>\n<ul>\n<li>Navigate to Infrastructure - Technologies and processes</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Technologies and processes&quot;</span> page\n</code></pre>\n<ul>\n<li>Navigate to Application &amp; Microservices - Services</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Services&quot;</span> page\n</code></pre>","activityList":[]}]},{"id":"4","name":"Intro To Tagging","content":"<h2 id=\"intrototagging\">Intro To Tagging</h2>\n<p>In this module, you will learn how tagging is setup using both a manual tag and an automatic tagging rule. The best practices for tagging will also be dicussed during this module.</p>\n<p>In this module you will go through the following actions:</p>\n<ol>\n<li>Manual tagging</li>\n<li>Automatic tagging</li>\n<li>Filter charts using tagging</li>\n</ol>","activityList":[{"id":"4.1","name":"Manual Tags","content":"<h2 id=\"manualtags\">Manual Tags</h2>\n<p>To get starting with this tagging module you first need to find the easyTrade entities in Dynatrace.</p>\n<p>Add a manual tag to the easyTrade entities, you can use any manual tag you want, if you want you can use your first or last name to make it simple. The actions will refer to your <strong>tag key</strong>, replace that with whatever you decide.</p>\n<ul>\n<li>Navigate to Application &amp; Microservices  - Frontend (Application tagging)</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Frontend&quot;</span> page\n   Action: Click on the application named <span class=\"hljs-string\">&quot;My Web Application&quot;</span>. This is your easyTrade application\n   Action: Click on <span class=\"hljs-string\">&quot;Tags and Detection Rules&quot;</span> at the top left area, click <span class=\"hljs-string\">&quot;+ Add tag&quot;</span>\n   Action: Type your <span class=\"hljs-string\">&quot;tag key&quot;</span> into the <span class=\"hljs-string\">&quot;Key&quot;</span> field and leave the <span class=\"hljs-string\">&quot;Value&quot;</span> field blank\n   Action: Click on the <span class=\"hljs-string\">&quot;Add&quot;</span> button to save.\n</code></pre>\n<ul>\n<li>Navigate to Infrastructure - Hosts (Host tagging)</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Hosts&quot;</span> page\n   Action: Click on any of the hosts listed.\n   Action: Click on <span class=\"hljs-string\">&quot;Properties and Tags&quot;</span> at the top left area, click <span class=\"hljs-string\">&quot;+ Add tag&quot;</span>\n   Action: Type your <span class=\"hljs-string\">&quot;tag key&quot;</span> into the <span class=\"hljs-string\">&quot;Key&quot;</span> field and leave the <span class=\"hljs-string\">&quot;Value&quot;</span> field blank\n   Action: Click on the <span class=\"hljs-string\">&quot;Add&quot;</span> button to save.\n</code></pre>\n<ul>\n<li>Navigate to Application &amp; Microservices  - Services (Services tagging)</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Services&quot;</span> page\n   Action: Click on any of the services listed.\n   Action: Click on <span class=\"hljs-string\">&quot;Properties and Tags&quot;</span> at the top left area, click <span class=\"hljs-string\">&quot;+ Add tag&quot;</span>\n   Action: Type your <span class=\"hljs-string\">&quot;tag key&quot;</span> into the <span class=\"hljs-string\">&quot;Key&quot;</span> field and leave the <span class=\"hljs-string\">&quot;Value&quot;</span> field blank\n   Action: Click on the <span class=\"hljs-string\">&quot;Add&quot;</span> button to save.\n</code></pre>\n<p><strong>FYI</strong> - Remember what you used for the manual <strong>tag key</strong>, you will use it in the next section.</p>","activityList":[]},{"id":"4.2","name":"Custom chart for Host CPU Usage","content":"<h2 id=\"customchartforhostcpuusage\">Custom chart for Host CPU Usage</h2>\n<p>To create a custom chart you need to use the Data explorer in Dynatrace.</p>\n<h4 id=\"indynatraceusingtheleftnavigationmenufinddataexplorerundertheobserveandexploresection\">In Dynatrace, using the left navigation menu find Data explorer under the Observe and Explore section</h4>\n<p>Create a custom chart for CPU usage using the manual tag you created in the previous section</p>\n<ul>\n<li>Navigate to Observe and explore - Data explorer</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Data explorer&quot;</span> page\n   Action: Type <span class=\"hljs-string\">&quot;CPU Usage %&quot;</span> into the field to the right of the <span class=\"hljs-string\">&quot;A&quot;</span> metric.\n   Action: Filter by <span class=\"hljs-string\">&quot;Host Tag&quot;</span>, find your manual <span class=\"hljs-string\">&quot;tag key&quot;</span> value and use it, pick <span class=\"hljs-string\">&quot;All tag values&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Run query&quot;</span> to see the results.\n</code></pre>\n<ul>\n<li>Add this chart to a dashboard</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Pin to dashboard&quot;</span>\n   Action: Pick create a new dashboard\n   Action: Change the Tile title to <span class=\"hljs-string\">&quot;Manually Filtered CPU Usage&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Pin&quot;</span> to save.\n</code></pre>\n<p><img src=\"assets/savetodashboard1.png\" alt=\"savetodashboard\" /></p>\n<ul>\n<li>Open dashboard and rename it</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Open dashboard&quot;</span>\n   Action: Click the <span class=\"hljs-string\">&quot;blue pencil&quot;</span> icon next to the title to change it.\n   Action: Click the <span class=\"hljs-string\">&quot;Done&quot;</span> button on the top right of the screen to save changes.\n</code></pre>\n<p><img src=\"assets/newdashboard.png\" alt=\"savetodashboard\" /></p>","activityList":[]},{"id":"4.3","name":"Custom chart Host CPU Usage for Service Response Time","content":"<h2 id=\"customcharthostcpuusageforserviceresponsetime\">Custom chart Host CPU Usage for Service Response Time</h2>\n<p>To create a custom chart you need to use the Data explorer in Dynatrace.</p>\n<h4 id=\"indynatraceusingtheleftnavigationmenufinddataexplorerundertheobserveandexploresection\">In Dynatrace, using the left navigation menu find Data explorer under the Observe and Explore section</h4>\n<p>Create a custom chart for Response time using the manual tag you created in the previous section</p>\n<ul>\n<li>Navigate to Observe and explore - Data explorer</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Data explorer&quot;</span> page\n   Action: Type <span class=\"hljs-string\">&quot;Response time&quot;</span> into the field to the right of the <span class=\"hljs-string\">&quot;A&quot;</span> metric.\n   Action: Filter by <span class=\"hljs-string\">&quot;Service Tag&quot;</span>, find your manual tag key value and use it, pick <span class=\"hljs-string\">&quot;All tag values&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Run query&quot;</span> to see the results.\n</code></pre>\n<ul>\n<li>Add this chart to your existing dashboard</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Pin to dashboard&quot;</span>\n   Action: Pick your dashboard from the list of dashboards\n   Action: Change the Tile title to <span class=\"hljs-string\">&quot;Manually Filtered Response Time&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Pin&quot;</span> to save.\n</code></pre>\n<p><img src=\"assets/savetodashboard2.png\" alt=\"savetodashboard\" /></p>\n<ul>\n<li>Open dashboard and view it</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Open dashboard&quot;</span>\n</code></pre>","activityList":[]},{"id":"4.4","name":"Automatic Tags","content":"<h2 id=\"automatictags\">Automatic Tags</h2>\n<p>To get starting with this automated tagging module you first need to find the settings in Dynatrace.</p>\n<h4 id=\"indynatraceusingtheleftnavigationmenufindsettingsundermanagesection\">In Dynatrace, using the left navigation menu find Settings under Manage section</h4>\n<ul>\n<li>Navigate to Manage  - Settings</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Settings&quot;</span> page\n</code></pre>\n<ul>\n<li>Navigate to Automatically applied tags</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click on the <span class=\"hljs-string\">&quot;Tags&quot;</span> section within the light gray settings menu\n   Action: Click on <span class=\"hljs-string\">&quot;Automatically applied tags&quot;</span>\n</code></pre>\n<ul>\n<li>Add an automated tagging rule to the easyTrade Orders service</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Create tag&quot;</span>\n   Action: Type <span class=\"hljs-string\">&quot;orders&quot;</span> into the <span class=\"hljs-string\">&quot;Tag&quot;</span> name field and leave the <span class=\"hljs-string\">&quot;Description&quot;</span> field blank\n   Action: Click <span class=\"hljs-string\">&quot;Add a new rule&quot;</span>\n   Action: In the <span class=\"hljs-string\">&quot;Rule applies to&quot;</span> field pick <span class=\"hljs-string\">&quot;Services&quot;</span>\n</code></pre>\n<pre><code class=\"hljs bash language-bash\">   Action: Toggle on <span class=\"hljs-string\">&quot;Apply to underlying hosts of matching services&quot;</span>\n   Action: Toggle on <span class=\"hljs-string\">&quot;Apply to underlying process groups of matching services&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Add condition&quot;</span>\n</code></pre>\n<pre><code class=\"hljs bash language-bash\">   Action: Pick <span class=\"hljs-string\">&quot;Service name&quot;</span> from the <span class=\"hljs-string\">&quot;Property&quot;</span> dropdown list\n   Action: Pick <span class=\"hljs-string\">&quot;contains&quot;</span> from the <span class=\"hljs-string\">&quot;Operator&quot;</span> dropdown list\n   Action: Type <span class=\"hljs-string\">&quot;orders&quot;</span> into the <span class=\"hljs-string\">&quot;Value&quot;</span> field and and toggle off <span class=\"hljs-string\">&quot;Case sensitive&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Preview&quot;</span> to view the matched entities\n   Action: Click <span class=\"hljs-string\">&quot;Save changes&quot;</span> on the lower left of your screen to save the new rule\n</code></pre>\n<ul>\n<li>Use the automated tagging rule to filter database entities</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Databases&quot;</span> page\n   Action: Filter by <span class=\"hljs-string\">&quot;Tag&quot;</span>, pick <span class=\"hljs-string\">&quot;orders&quot;</span> and use it\n</code></pre>\n<p><strong>FYI</strong> - It may take a few minutes for your automated tagging rules to propogate, wait a few minutes and try again.</p>","activityList":[]}]},{"id":"5","name":"3rd Party K8s Annotations","content":"<h2 id=\"3rdpartyk8sannotations\">3rd Party K8s Annotations</h2>\n<p>In the previous module you learned about tagging. In this module, you will learn more about metadata and how to use 3rd party data (Annotations from Kubernetes) as metadata in Dynatrace. We will use annotations from Kubernetes pods to popluate metadata into Dynatrace.</p>\n<p>In this module you will go through the following actions:</p>\n<ol>\n<li>Metadata use cases and sources for Kubernetes Annotations</li>\n<li>Update labels from Kubernetes</li>\n<li>Verify updates to metadata in Dynatrace</li>\n</ol>","activityList":[{"id":"5.1","name":"Assign permissions so Dynatrace can pull the Kubernetes metadata","content":"<h2 id=\"assignpermissionssodynatracecanpullthekubernetesmetadata\">Assign permissions so Dynatrace can pull the Kubernetes metadata</h2>\n<p>Using our locally clone repo from the <strong>Setup Environment</strong> step we previuosly completed we will run a script to automatically assign the proper permissions.</p>\n<ul>\n<li>In your Bastion terminal let's run the permission script:</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   sh ~/perform-2023-mastering-dynatrace-configuration/scripts/metadata-viewer.sh\n</code></pre>\n<p>The contents should look similiar to the following:</p>\n<pre><code class=\"hljs bash language-bash\">    <span class=\"hljs-string\">&quot;role.rbac.authorization.k8s.io/dynatrace-oneagent-metadata-viewer createdâ€‹&quot;</span>\n    <span class=\"hljs-string\">&quot;rolebinding.rbac.authorization.k8s.io/dynatrace-oneagent-metadata-viewer-binding createdâ€‹&quot;</span>\n</code></pre>\n<ul>\n<li>Now you have created the permissions let's look at the yaml file.</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   cat ../easytrade/dynatrace-oneagent-metadata-viewer.yaml\n</code></pre>\n<ul>\n<li>Take time to review the contents of the yaml file</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Review the yaml file contents\n</code></pre>","activityList":[]},{"id":"5.2","name":"Verify Dynatrace and Kubernetes metadata match","content":"<h2 id=\"verifydynatraceandkubernetesmetadatamatch\">Verify Dynatrace and Kubernetes metadata match</h2>\n<p>In the commands below you will need to replace </p>\n<ul>\n<li>K8S_CONTAINER_NAME_OF_YOUR_POD</li>\n<li>NAME_OF_YOUR_POD</li>\n<li>NAMESPACE_OF_YOUR_POD</li>\n</ul>\n<p>with the correct values and you will need to remove the quotes once replaced.\nThese names can be found in the <strong>Process Group Properties</strong></p>\n<ul>\n<li>In your Bastion terminal let's view the metadata in Kubernetes:</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   kubectl describe pod <span class=\"hljs-string\">&quot;NAME_OF_YOUR_POD&quot;</span> -n <span class=\"hljs-string\">&quot;NAMESPACE_OF_YOUR_POD&quot;</span>\n\n   OR use the built-in script:\n\n   sh ~/perform-2023-mastering-dynatrace-configuration/scripts/describe-pod.sh easytrade\n</code></pre>\n<p>The contents should look similiar to the following:</p>\n<p><img src=\"assets/labelsandannotations.png\" alt=\"annotations\" /></p>\n<ul>\n<li>The Annotations should match what appears in the Dynatrace</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Check Dynatrace values\n</code></pre>","activityList":[]},{"id":"5.3","name":"Add additional metadata","content":"<h2 id=\"addadditionalmetadata\">Add additional metadata</h2>\n<ul>\n<li>Annotations and labels are detected at deployment time, so simply using </li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   kubectl annotation ...\n</code></pre>\n<p>will not update the information in Dynatrace until the pod is restarted.  After the pod has been restarted a new annotation will be added named \"restartedAt\" and it will show up in Dynatrace.</p>\n<p>In the commands below you will need to replace </p>\n<ul>\n<li>K8S_CONTAINER_NAME_OF_YOUR_POD</li>\n<li>NAME_OF_YOUR_POD</li>\n<li>NAMESPACE_OF_YOUR_POD</li>\n</ul>\n<p>with the correct values and you will need to remove the quotes once replaced.\nThese names can be found in the <strong>Process Group Properties</strong></p>\n<p>Let's cause the restart annotation to be added so we can see it in Dynatrace</p>\n<ul>\n<li>In your Bastion terminal let's restart our pod in Kubernetes:</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   kubectl rollout restart deployments/<span class=\"hljs-string\">&quot;K8S_CONTAINER_NAME_OF_YOUR_POD&quot;</span> -n <span class=\"hljs-string\">&quot;NAMESPACE_OF_YOUR_POD&quot;</span>\n</code></pre>\n<p>The contents should look similiar to the following:</p>\n<pre><code class=\"hljs bash language-bash\">    <span class=\"hljs-string\">&quot;deployment.apps/pricingservice restartedâ€‹&quot;</span>\n</code></pre>\n<ul>\n<li>Describe the pod again to see the newly updated annotations</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   kubectl describe pod <span class=\"hljs-string\">&quot;NAME_OF_YOUR_POD&quot;</span> -n <span class=\"hljs-string\">&quot;NAMESPACE_OF_YOUR_POD&quot;</span>\n</code></pre>\n<p>The contents should look similiar to the following:</p>\n<p><img src=\"assets/restartedat.png\" alt=\"restartedat\" /></p>","activityList":[]},{"id":"5.4","name":"Verify Dynatrace and Kubernetes metadata match","content":"<h2 id=\"verifydynatraceandkubernetesmetadatamatch\">Verify Dynatrace and Kubernetes metadata match</h2>\n<ul>\n<li>The Annotations should match what appears in the Dynatrace, you should now see the restartedat annotation</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Check Dynatrace values\n</code></pre>\n<p><img src=\"assets/restartedatdt.png\" alt=\"restartedatdt\" /></p>","activityList":[]}]},{"id":"6","name":"3rd Party Environment","content":"<h2 id=\"3rdpartyenvironment\">3rd Party Environment</h2>\n<p>In this module, you will learn how to use environment properties as metadata in Dynatrace. This extends your knowledge of how Dynatrace uses metadata to expand the monitoring capabilities within Dynatrace and provides more options for any filtering within Dynatrace.</p>\n<p>In this module you will go through the following actions:</p>\n<ol>\n<li>Metadata use cases and sources for Environment variables/properties</li>\n<li>Update values from 3rd party resources</li>\n<li>Verify updates to metadata in Dynatrace</li>\n</ol>","activityList":[{"id":"6.1","name":"Metadata - Environment","content":"<h2 id=\"metadataenvironment\">Metadata - Environment</h2>\n<p>Another way to add Metadata to a process is via the Environment Variable</p>\n<ul>\n<li>DT_CUSTOM_PROPâ€‹</li>\n</ul>\n<p>The variable must be visible to the respective process at startup <strong>(IMPORTANT)â€‹</strong></p>\n<p>Once in place the variables show up on each respective Process and Process Group pageâ€‹</p>\n<p>In Kubernetes, an Environment Variable can be added via the env property in the container specâ€‹</p>\n<p>The spec file looks similiar to the following:</p>\n<p><img src=\"assets/envk8s.png\" alt=\"envk8\" /></p>","activityList":[]},{"id":"6.2","name":"Add additional metadata to easyTrade application via environment variable","content":"<h2 id=\"addadditionalmetadatatoeasytradeapplicationviaenvironmentvariable\">Add additional metadata to easyTrade application via environment variable</h2>\n<ul>\n<li>In your Bastion terminal, navigate to the following directory:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   <span class=\"hljs-built_in\">cd</span> ~/deploy/easyTrade/manifestsâ€‹\n</code></pre>\n<p>In this directory you will see deployment files associated with the easyTrade app, we are going to make a change to the file</p>\n<ul>\n<li>brokerservice.yaml</li>\n</ul>\n<p>The contents of brokerservice.yaml should look similiar to the following:</p>\n<p><img src=\"assets/nanobrokerservice.png\" alt=\"nanobrokerservice\" /></p>\n<p>Using nano, weâ€™ll add some metadata to the brokerservice service via an Environment properties</p>\n<ul>\n<li>To open the brokerservice.yaml file, weâ€™ll type the following:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   nano brokerservice.yamlâ€‹\n</code></pre>\n<ul>\n<li>In the env section add the following:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   env:\n   - name: JAVA_OPTS\n     value: -Xms128m -Xmx512m -XX:PermSize=128m -XX+UseG1GC -Djava.security.egd=file:/dev/urandom\n   - name: DT_CUSTOM_PROP\n     value: Environment=Devâ€‹\n\n    After adding the above line, press <span class=\"hljs-string\">&quot;Ctrl+X&quot;</span> , press <span class=\"hljs-string\">&quot;Y&quot;</span> and press <span class=\"hljs-string\">&quot;Enter&quot;</span> to saveâ€‹\n</code></pre>\n<p>We now need to apply the changes, so we need to trigger Kubernetes to stop our current container and start a new one with our Environment Variable addedâ€‹</p>\n<ul>\n<li>To apply the changes, execute:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">    kubectl apply -f brokerservice.yamlâ€‹\n</code></pre>","activityList":[]},{"id":"6.3","name":"View the additional metadata in Dynatrace","content":"<h2 id=\"viewtheadditionalmetadataindynatrace\">View the additional metadata in Dynatrace</h2>\n<ul>\n<li>After the updates are applied from the previous step, we need to check to see if we see the updated Environment metadata in Dynatrace</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">    Action: Find the broker service, name=<span class=\"hljs-string\">&quot;broker&quot;</span>\n    Action: Check the Environment custom metadata inside the Properties section\n</code></pre>\n<p>The contents should look similiar to the following:</p>\n<p><img src=\"assets/brokerdt.png\" alt=\"brokerdt\" /></p>","activityList":[]}]},{"id":"7","name":"3rd Party K8s Labels","content":"<h2 id=\"3rdpartyk8slabels\">3rd Party K8s Labels</h2>\n<p>In this module, you will learn more about metadata and how to use 3rd party data (Labels from Kubernetes) as metadata in Dynatrace. We will use labels rom Kubernetes pods to popluate metadata into Dynatrace.</p>\n<p>In this module you will go through the following actions:</p>\n<ol>\n<li>Metadata use cases and sources for Kubernetes Labels</li>\n<li>Update labels from Kubernetes</li>\n<li>Verify updates to metadata in Dynatrace</li>\n</ol>","activityList":[{"id":"7.1","name":"Verify Dynatrace and Kubernetes metadata match","content":"<h2 id=\"verifydynatraceandkubernetesmetadatamatch\">Verify Dynatrace and Kubernetes metadata match</h2>\n<p>In the commands below you will need to replace </p>\n<ul>\n<li>K8S_CONTAINER_NAME_OF_YOUR_POD</li>\n<li>NAME_OF_YOUR_POD</li>\n<li>NAMESPACE_OF_YOUR_POD</li>\n</ul>\n<p>with the correct values and you will need to remove the quotes once replaced.\nThese names can be found in the <strong>Process Group Properties</strong></p>\n<ul>\n<li>In your Bastion terminal let's view the metadata in Kubernetes:</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   kubectl describe pod <span class=\"hljs-string\">&quot;NAME_OF_YOUR_POD&quot;</span> -n <span class=\"hljs-string\">&quot;NAMESPACE_OF_YOUR_POD&quot;</span>\n</code></pre>\n<p>The contents should look similiar to the following:</p>\n<p><img src=\"assets/labelsdt.png\" alt=\"labelsdt\" /></p>\n<ul>\n<li>The Labels should match what appears in the Dynatrace</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Check Dynatrace values\n</code></pre>","activityList":[]},{"id":"7.2","name":"Add additional metadata to easyTrade application via labels","content":"<h2 id=\"addadditionalmetadatatoeasytradeapplicationvialabels\">Add additional metadata to easyTrade application via labels</h2>\n<ul>\n<li>In your Bastion terminal, navigate to the following directory:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   <span class=\"hljs-built_in\">cd</span> ~/deploy/easyTrade/manifestsâ€‹\n</code></pre>\n<p>In this directory you will see deployment files associated with the easyTrade app, we are going to make a change to the file</p>\n<ul>\n<li>brokerservice.yaml</li>\n</ul>\n<p>Using nano, weâ€™ll add some metadata to the brokerservice service via a Labelâ€‹</p>\n<ul>\n<li>To open the brokerservice.yaml file, weâ€™ll type the following:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   nano brokerservice.yamlâ€‹\n</code></pre>\n<ul>\n<li>In the labels section add the following:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   template:\n     metadata:\n       labels:\n         app: brokerservice\n         hands: onTraining         \n\n    After adding the above line, press <span class=\"hljs-string\">&quot;Ctrl+X&quot;</span> , press <span class=\"hljs-string\">&quot;Y&quot;</span> and press <span class=\"hljs-string\">&quot;Enter&quot;</span> to saveâ€‹\n</code></pre>\n<p>We now need to apply the changes, so we need to trigger Kubernetes to stop our current container and start a new one with our Environment Variable addedâ€‹</p>\n<ul>\n<li>To apply the changes, execute:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">    kubectl apply -f brokerservice.yamlâ€‹\n</code></pre>","activityList":[]},{"id":"7.3","name":"Verify Dynatrace and Kubernetes metadata match","content":"<h2 id=\"verifydynatraceandkubernetesmetadatamatch\">Verify Dynatrace and Kubernetes metadata match</h2>\n<ul>\n<li>The Labels should match what appears in the Dynatrace, you should now see the newly added label</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Check Dynatrace values\n</code></pre>\n<p><img src=\"assets/dtontraining.png\" alt=\"dtontraining\" /></p>","activityList":[]}]},{"id":"8","name":"Environment Tags","content":"<h2 id=\"environmenttags\">Environment Tags</h2>\n<p>In this module, you will learn how to use environment tags in Dynatrace. This extends your knowledge of how Dynatrace uses tags to expand the monitoring capabilities within Dynatrace and provides more options for any tag filtering within Dynatrace.</p>\n<p>In this module you will go through the following actions:</p>\n<ol>\n<li>Metadata use cases and sources for Environment tags</li>\n<li>Update environment variables from Kubernetes</li>\n<li>Verify updates to metadata in Dynatrace</li>\n</ol>","activityList":[{"id":"8.1","name":"Metadata - Environment","content":"<h2 id=\"metadataenvironment\">Metadata - Environment</h2>\n<p>Another way to add Metadata to a process is via the Environment variable</p>\n<ul>\n<li>DT_TAGSâ€‹</li>\n</ul>\n<p>The variable must be visible to the respective process at startup <strong>(IMPORTANT)â€‹</strong></p>\n<p>Once in place the variables show up on each respective Process and Process Group pageâ€‹</p>\n<p>In Kubernetes, an Environment Variable can be added via the env property in the container specâ€‹</p>\n<p>The spec file looks similiar to the following:</p>\n<p><img src=\"assets/envk8s.png\" alt=\"envk8\" /></p>","activityList":[]},{"id":"8.2","name":"Add additional metadata to easyTrade application via environment variable","content":"<h2 id=\"addadditionalmetadatatoeasytradeapplicationviaenvironmentvariable\">Add additional metadata to easyTrade application via environment variable</h2>\n<ul>\n<li>In your Bastion terminal, navigate to the following directory:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   <span class=\"hljs-built_in\">cd</span> ~/deploy/easyTrade/manifestsâ€‹\n</code></pre>\n<p>In this directory you will see deployment files associated with the easyTrade app, we are going to make a change to the file</p>\n<ul>\n<li>brokerservice.yaml</li>\n</ul>\n<p>Using nano, weâ€™ll add some metadata to the brokerservice service via an Environment Variableâ€‹</p>\n<ul>\n<li>To open the brokerservice.yaml file, weâ€™ll type the following:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   nano brokerservice.yamlâ€‹\n</code></pre>\n<ul>\n<li>In the env section add the following:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   env:\n   - name: DT_CUSTOM_PROP\n     value: Environment=Devâ€‹\n   - name: DT_TAGS\n     value: hotday customer=acmeâ€‹\n\n    After adding the above line, press <span class=\"hljs-string\">&quot;Ctrl+X&quot;</span> , press <span class=\"hljs-string\">&quot;Y&quot;</span> and press <span class=\"hljs-string\">&quot;Enter&quot;</span> to saveâ€‹\n</code></pre>\n<p>We now need to apply the changes, so we need to trigger Kubernetes to stop our current container and start a new one with our Environment Variable addedâ€‹</p>\n<ul>\n<li>To apply the changes, execute:â€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">    kubectl apply -f brokerservice.yamlâ€‹\n</code></pre>","activityList":[]},{"id":"8.3","name":"View the additional metadata in Dynatrace","content":"<h2 id=\"viewtheadditionalmetadataindynatrace\">View the additional metadata in Dynatrace</h2>\n<ul>\n<li>After the updates are applied from the previous step, we need to check to see if we see the updated Environment metadata in Dynatrace</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">    Action: Find the broker service, name=<span class=\"hljs-string\">&quot;brokerservice&quot;</span>\n    Action: Check the Environment custom metadata inside the Properties section\n</code></pre>\n<p>The contents should look similiar to the following:</p>\n<p><img src=\"assets/hotdaytag.png\" alt=\"hotdaytag\" /></p>","activityList":[]}]},{"id":"9","name":"Dynatrace API","content":"<h2 id=\"dynatraceapi\">Dynatrace API</h2>\n<p>In this module, you will learn the use of the Dynatrace APIs, you will also learn to define permissions via a secure API tokens for API connections. You will use the API in this module to update configurations, in addtion the API can be used for pulling data and metadata from the Dynatrace detected entities, you can add/remove tags from Applications, Hosts, Process Groups, and Servicesâ€‹ and much more. We will use the Topology and Smartscape APIâ€‹ during this module.</p>\n<p>In this module you will go through the following actions:</p>\n<ol>\n<li>Create secure token for use with Dynatrace API</li>\n<li>View data using the GET API.</li>\n<li>Update Dynatrace using the POST API</li>\n<li>Verify updates in Dynatrace</li>\n</ol>","activityList":[{"id":"9.1","name":"Dynatrace API - Security Tokens","content":"<h2 id=\"dynatraceapisecuritytokens\">Dynatrace API - Security Tokens</h2>\n<p>To get started with the API you first need to create a security token in Dynatrace.</p>\n<h4 id=\"indynatraceusingtheleftnavigationmenufindaccesstokensunderthemanagesection\">In Dynatrace, using the left navigation menu find Access tokens under the Manage section</h4>\n<ul>\n<li>Add a new token, with the <strong>Access problem and event feed, metrics, and topology</strong> scope. Once you can see the token you must save it to a text file for future use as we will not be able to retrieve it once you exit the final screen.</li>\n</ul>\n<p>Navigate to Manage - Access tokens</p>\n<p><img src=\"assets/smartscapeapitoken.png\" alt=\"smartscapeapitoken\" /></p>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Generate new token&quot;</span>\n   Action: Type <span class=\"hljs-string\">&quot;Smartscape API&quot;</span> into the <span class=\"hljs-string\">&quot;Token name&quot;</span> field\n   Action: Type <span class=\"hljs-string\">&quot;Access problem&quot;</span> into the <span class=\"hljs-string\">&quot;Select scopes from the table below&quot;</span> field\n   Action: Check the blue box to assign the scope\n   Action: Click <span class=\"hljs-string\">&quot;Generate token&quot;</span> to save\n</code></pre>\n<p><img src=\"assets/savetoken.png\" alt=\"savetoken\" /></p>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Copy&quot;</span> to save the token to the clipboard\n   Action: Save it somewhere so it can be accessed later (It will not be visible after this page)\n</code></pre>","activityList":[]},{"id":"9.2","name":"Dynatrace API - Swagger interface","content":"<h2 id=\"dynatraceapiswaggerinterface\">Dynatrace API - Swagger interface</h2>\n<p>To get started testing the API you now need to know how to access it.</p>\n<ul>\n<li>https://YourEnvironmentID.live.dynatrace.com/rest-api-doc/index.jsp</li>\n</ul>\n<p>In the URL above you will need to replace </p>\n<ul>\n<li>YourEnvironmentID</li>\n</ul>\n<p>with the correct value from your Dynatrace URL</p>\n<h4 id=\"indynatraceyoucanalsoaccesstheapifromyourprofileiconinthetoprightarea\">In Dynatrace, you can also access the API from your profile icon in the top right area.</h4>\n<p>To start this module select the Environment API v1, it can be found in the profile menu or on the top right of the Dynatrace API Documentation.</p>\n<ul>\n<li>Navigate to Access tokens  - Time to authenticate</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Authorize&quot;</span>\n   Action: Paste your newly saved token value into the <span class=\"hljs-string\">&quot;Value&quot;</span> field\n   Action: Click <span class=\"hljs-string\">&quot;Authorize&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Close&quot;</span> to save\n</code></pre>\n<ul>\n<li>API  - GET</li>\n</ul>\n<p><img src=\"assets/tspgdocs.png\" alt=\"tspgdocs\" /></p>\n<pre><code class=\"hljs bash language-bash\">   Action: Click on <span class=\"hljs-string\">&quot;Smartscape &amp; Topology - Process Group&quot;</span> to expand the API\n   Action: Click on the second <span class=\"hljs-string\">&quot;GET&quot;</span> api to expand it\n</code></pre>\n<p>The <strong>meIdentifier</strong> field is also known as the Dynatrace entity ID. This is a unique ID used within Dynatrace.</p>\n<p><em>An example is PROCESS_GROUP-65D65DF2C4E6E488</em></p>\n<ul>\n<li><p>For this scenario we will use the ID of the process group named \"brokerservice\" under the \"easyTrade\" namespace\nYou can copy it from the URL in Dynatrace when you are viewing that process group.</p>\n<p><em>An example URL is:</em></p>\n<p><em>https://â€¦/#processgroupdetails;id=PROCESS_GROUP-6A43A47932317140;â€¦</em></p>\n<p><em>In this example you would cut out PROCESS_GROUP-6A43A47932317140 from the URL and use only what you cut out in the next set of actions</em></p></li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Try it out&quot;</span>\n   Action: Paste your unique <span class=\"hljs-string\">&quot;PROCESS_GROUP-...&quot;</span> ID into the <span class=\"hljs-string\">&quot;meIdentifier&quot;</span> field\n   Action: Click <span class=\"hljs-string\">&quot;Execute&quot;</span>\n</code></pre>\n<p>View the result under server response, it should show a code of 200, with JSON data in the Response body</p>","activityList":[]},{"id":"9.3","name":"Dynatrace API - Post an update","content":"<h2 id=\"dynatraceapipostanupdate\">Dynatrace API - Post an update</h2>\n<p>For this module we will continue to use the Environment API v1, make sure you are still authorized or follow these steps to re authorize your connection.</p>\n<ul>\n<li>Navigate to Access tokens  - Time to authenticate</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Authorize&quot;</span>\n   Action: Paste your newly saved token value into the <span class=\"hljs-string\">&quot;Value&quot;</span> field\n   Action: Click <span class=\"hljs-string\">&quot;Authorize&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Close&quot;</span> to save\n</code></pre>\n<ul>\n<li>API  - POST</li>\n</ul>\n<p><img src=\"assets/tspgdocs.png\" alt=\"tspgdocs\" /></p>\n<pre><code class=\"hljs bash language-bash\">   Action: Click on <span class=\"hljs-string\">&quot;Smartscape &amp; Topology - Process Group&quot;</span> to expand the API\n   Action: Click on the <span class=\"hljs-string\">&quot;POST&quot;</span> api to expand it\n</code></pre>\n<ul>\n<li>Again, for this scenario we will use the ID of the process group named \"brokerservice\" under the \"easyTrade\" namespace. Remember how we found and used the <strong>meIdentifier</strong> from the previous section, we will use it again so make sure you have it available.</li>\n</ul>\n<p>If you don't have it available, you can copy it from the URL in Dynatrace when you are viewing that process group.</p>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Try it out&quot;</span>\n   Action: Paste your unique <span class=\"hljs-string\">&quot;PROCESS_GROUP-...&quot;</span> ID into the <span class=\"hljs-string\">&quot;meIdentifier&quot;</span> field\n   Action: Paste the following into the Request body JSON body field \n\n{\n  <span class=\"hljs-string\">&quot;tags&quot;</span>: [\n    <span class=\"hljs-string\">&quot;APITag&quot;</span>\n ]\n}\n\n   Action: Click <span class=\"hljs-string\">&quot;Execute&quot;</span>\n</code></pre>\n<ul>\n<li>View the result under server response, it should show a code of 200 or 204, with JSON data in the Response body</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Check the correct response code, 204 Success. The parameters of the process group have been updated.\n</code></pre>\n<ul>\n<li>When looking at your Process Group in Dynatrace,  you should see your tag present via the APIâ€‹</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Check the newly added tag of brokerservice it should be updated within a minute or two.\n</code></pre>\n<p><img src=\"assets/apitag.png\" alt=\"apitag\" /></p>","activityList":[]}]},{"id":"10","name":"Automatic Tagging - Use Cases","content":"<h2 id=\"automatictaggingusecases\">Automatic Tagging - Use Cases</h2>\n<p>In this module you'll learn how to use automatic tagging rules to help organize entities into a management zone in Dynatrace, filter distributed traces, create maintenance windows and more. </p>\n<p>In this module you will go through the following actions:</p>\n<ol>\n<li>Create a new automatic tagging rule</li>\n<li>Create a new management zone</li>\n<li>Filter traces using new automatic tagging</li>\n<li>Create a maintenence window using automatic tagging</li>\n</ol>","activityList":[{"id":"10.1","name":"Automatic Tagging - Setup","content":"<h2 id=\"automatictaggingsetup\">Automatic Tagging - Setup</h2>\n<p>In preperation for the next this module we need to create a new automatic tagging rule. Let's go back to the settings in Dynatrace.</p>\n<h4 id=\"indynatraceusingtheleftnavigationmenufindsettingsundermanagesection\">In Dynatrace, using the left navigation menu find Settings under Manage section</h4>\n<ul>\n<li>Navigate to Manage  - Settings</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Settings&quot;</span> page\n</code></pre>\n<ul>\n<li>Automatically applied tags</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click on the <span class=\"hljs-string\">&quot;Tags&quot;</span> section within the light gray settings menu\n   Action: Click on <span class=\"hljs-string\">&quot;Automatically applied tags&quot;</span>\n</code></pre>\n<ul>\n<li>Add an automated tagging rule to the easyTrade Broker service</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Create tag&quot;</span>\n   Action: Type <span class=\"hljs-string\">&quot;broker&quot;</span> into the <span class=\"hljs-string\">&quot;Tag&quot;</span> field and leave the <span class=\"hljs-string\">&quot;Description&quot;</span> field blank\n   Action: Click <span class=\"hljs-string\">&quot;Add a new rule&quot;</span>\n   Action: In the <span class=\"hljs-string\">&quot;Rule applies to&quot;</span> field pick <span class=\"hljs-string\">&quot;Services&quot;</span>\n</code></pre>\n<pre><code class=\"hljs bash language-bash\">   Action: Toggle on <span class=\"hljs-string\">&quot;Apply to underlying hosts of matching services&quot;</span>\n   Action: Toggle on <span class=\"hljs-string\">&quot;Apply to underlying process groups of matching services&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Add condition&quot;</span>\n</code></pre>\n<pre><code class=\"hljs bash language-bash\">   Action: Pick <span class=\"hljs-string\">&quot;Service name&quot;</span> from the <span class=\"hljs-string\">&quot;Property&quot;</span> dropdown list\n   Action: Pick <span class=\"hljs-string\">&quot;contains&quot;</span> from the <span class=\"hljs-string\">&quot;Operator&quot;</span> dropdown list\n   Action: Type <span class=\"hljs-string\">&quot;broker&quot;</span> into the <span class=\"hljs-string\">&quot;Value&quot;</span> field and and toggle off <span class=\"hljs-string\">&quot;Case sensitive&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Preview&quot;</span> to view the matched entities\n   Action: Click <span class=\"hljs-string\">&quot;Save changes&quot;</span> on the lower left of your screen to save the new rule\n</code></pre>\n<ul>\n<li>Use the automated tagging rule to filter database entities</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Services&quot;</span> page\n   Action: Filter by <span class=\"hljs-string\">&quot;Tag&quot;</span>, pick <span class=\"hljs-string\">&quot;broker&quot;</span> and use it\n</code></pre>\n<p><strong>FYI</strong> - It may take a few minutes for your automated tagging rules to propogate, wait a few minutes and try again.</p>","activityList":[]},{"id":"10.2","name":"Automatic Tagging - Management Zones","content":"<h2 id=\"automatictaggingmanagementzones\">Automatic Tagging - Management Zones</h2>\n<p>Inside Dynatrace, you can use management zones to logically separate your environment out. This can be useful for limiting access to certain elements of the estate but also to decrease complexity for users â€“ No need to see the whole world if they only care for a portion!â€‹</p>\n<p>We will now create a new management zone using the tagging we just created in the last steps. Let's go back to the settings in Dynatrace.</p>\n<h4 id=\"indynatraceusingtheleftnavigationmenufindsettingsundermanagesection\">In Dynatrace, using the left navigation menu find Settings under Manage section</h4>\n<ul>\n<li>Navigate to Manage  - Settings</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Settings&quot;</span> page\n</code></pre>\n<ul>\n<li>Preferences, Management zones</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click on the <span class=\"hljs-string\">&quot;Preferences&quot;</span> section within the light gray settings menu\n   Action: Click on <span class=\"hljs-string\">&quot;Management zones&quot;</span>\n</code></pre>\n<ul>\n<li>Add an management zone using existing tagging rule applied to the easyTrade Broker service</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Add new management zone&quot;</span>\n   Action: Type <span class=\"hljs-string\">&quot;broker&quot;</span> into the <span class=\"hljs-string\">&quot;Management zone name&quot;</span> field and leave the <span class=\"hljs-string\">&quot;Description&quot;</span> field blank\n   Action: Click <span class=\"hljs-string\">&quot;Add a new rule&quot;</span>\n   Action: Pick <span class=\"hljs-string\">&quot;Monitored entity&quot;</span> from the <span class=\"hljs-string\">&quot;Rule type&quot;</span> dropdown list\n   Action: In the <span class=\"hljs-string\">&quot;Rule applies to&quot;</span> field pick <span class=\"hljs-string\">&quot;Services&quot;</span>\n</code></pre>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Add condition&quot;</span>\n</code></pre>\n<pre><code class=\"hljs bash language-bash\">   Action: Pick <span class=\"hljs-string\">&quot;Service tags&quot;</span> from the <span class=\"hljs-string\">&quot;Property&quot;</span> dropdown list\n   Action: Pick <span class=\"hljs-string\">&quot;tag key equals&quot;</span> from the <span class=\"hljs-string\">&quot;Operator&quot;</span> dropdown list\n   Action: Pick <span class=\"hljs-string\">&quot;broker&quot;</span> from the <span class=\"hljs-string\">&quot;Tag&quot;</span> dropdown list\n   Action: Toggle on <span class=\"hljs-string\">&quot;Apply to underlying hosts of matching services&quot;</span>\n   Action: Toggle on <span class=\"hljs-string\">&quot;Apply to underlying process groups of matching services&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Preview&quot;</span> to view the matched entities\n   Action: Click <span class=\"hljs-string\">&quot;Save changes&quot;</span> on the lower left of your screen to save the new rule\n</code></pre>\n<p>In the future, anything tagged with <strong>brokerservice</strong> will fall immediately into the same management zone, which is very powerful for architecting your environment, and controlling who has access to which parts of the data setsâ€‹. We call this automation!</p>\n<ul>\n<li>Use the automated tagging rule to filter services entities</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Services&quot;</span> page\n   Action: Filter by <span class=\"hljs-string\">&quot;broker&quot;</span> management zone (filter icon at the top right of the page)\n</code></pre>\n<p><strong>FYI</strong> - It may take a few minutes for your automated tagging rules to propogate, wait a few minutes and try again.</p>","activityList":[]},{"id":"10.3","name":"Automatic Tagging - Distributed traces","content":"<h2 id=\"automatictaggingdistributedtraces\">Automatic Tagging - Distributed traces</h2>\n<p>With our tag that we have propagated to the detected Servicesâ€‹, go ahead and enter the distributed traces and utilize the tagging rule created before to bring filter the list of tracesâ€‹.</p>\n<h4 id=\"indynatraceusingtheleftnavigationmenufinddistributedtracesunderapplicationmicroservicessection\">In Dynatrace, using the left navigation menu find Distributed traces under Application &amp; Microservices section</h4>\n<ul>\n<li>Navigate to Manage  - Application &amp; Microservices</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Distributed traces&quot;</span> page\n</code></pre>\n<ul>\n<li>Filter using \"broker\" service tag in the <strong>Filter requests</strong> field</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Filter using Service tag <span class=\"hljs-string\">&quot;broker&quot;</span> all\n</code></pre>\n<p>Now you have sorted through the entire environments data, and limited it to the \"broker\" tag, let's narrow the list using response time &gt; 200msâ€‹</p>\n<ul>\n<li>Filter using \"response time &gt; 200msâ€‹\" in the <strong>Filter requests</strong> field</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Filter using <span class=\"hljs-string\">&quot;Response time&quot;</span> with value of <span class=\"hljs-string\">&quot;&gt; 200ms&quot;</span>\n</code></pre>\n<p><img src=\"assets/tracefilter.png\" alt=\"tracefilter\" /></p>","activityList":[]},{"id":"10.4","name":"Automatic Tagging - Maintenance Window","content":"<h2 id=\"automatictaggingmaintenancewindow\">Automatic Tagging - Maintenance Window</h2>\n<p>We will now create a new maintenance window using the tagging we just created in the previous steps. Let's go back to the settings in Dynatrace.</p>\n<h4 id=\"indynatraceusingtheleftnavigationmenufindsettingsundermanagesection\">In Dynatrace, using the left navigation menu find Settings under Manage section</h4>\n<ul>\n<li>Navigate to Manage  - Settings</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Settings&quot;</span> page\n</code></pre>\n<ul>\n<li>Maintenance windows, Monitoring, alerting and availability</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click on the <span class=\"hljs-string\">&quot;Maintenance windows&quot;</span> section within the light gray settings menu\n   Action: Click on <span class=\"hljs-string\">&quot;Monitoring, alerting and availability&quot;</span>\n</code></pre>\n<p>Tags can also be utilized for maintenance windows â€“ these are typically planned periods of system downtime during which your DevOps team can perform any maintenance and system upgrades out of peak traffic hoursâ€‹</p>\n<ul>\n<li>Add an maintenance window that occur every Friday, 04:00-04:30 to detect problems and not alertâ€‹ using existing tagging rule applied to the easyTrade Broker service </li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Add maintenance window&quot;</span>\n   Action: Type <span class=\"hljs-string\">&quot;broker&quot;</span> into the <span class=\"hljs-string\">&quot;Name&quot;</span> field and leave the <span class=\"hljs-string\">&quot;Description&quot;</span> field blank\n   Action: Pick <span class=\"hljs-string\">&quot;Planned&quot;</span> from the <span class=\"hljs-string\">&quot;Maintenance type&quot;</span> dropdown list\n   Action: Pick <span class=\"hljs-string\">&quot;Detect problems but don&#x27;t alert&quot;</span> from the <span class=\"hljs-string\">&quot;Problem detection and alerting&quot;</span> dropdown list\n   Action: Pick <span class=\"hljs-string\">&quot;Weekly&quot;</span> from the <span class=\"hljs-string\">&quot;Recurrence&quot;</span> dropdown list\n   Action: Pick <span class=\"hljs-string\">&quot;Friday&quot;</span> from the <span class=\"hljs-string\">&quot;Day of week&quot;</span> dropdown list\n   Action: Type <span class=\"hljs-string\">&quot;04:00&quot;</span> into the <span class=\"hljs-string\">&quot;Time window Start time&quot;</span> field\n   Action: Type <span class=\"hljs-string\">&quot;04:30&quot;</span> into the <span class=\"hljs-string\">&quot;Time window End time&quot;</span> field\n   Action: Leave the <span class=\"hljs-string\">&quot;Timezone&quot;</span> and <span class=\"hljs-string\">&quot;Recurrence range Start date&quot;</span>\n   Action: Change the <span class=\"hljs-string\">&quot;Recurrence range End date&quot;</span> to the last day of the month\n   Action: Click <span class=\"hljs-string\">&quot;Add filter&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;+ Add tag&quot;</span>\n   Action: Type <span class=\"hljs-string\">&quot;broker&quot;</span> into the <span class=\"hljs-string\">&quot;Key&quot;</span> field click <span class=\"hljs-string\">&quot;Add&quot;</span>\n   Action: Click <span class=\"hljs-string\">&quot;Save changes&quot;</span> on the lower left of your screen to save the new rule\n</code></pre>\n<p><img src=\"assets/mwbroker.png\" alt=\"mwbroker\" /></p>","activityList":[]}]},{"id":"11","name":"Naming Rules","content":"<h2 id=\"namingrules\">Naming Rules</h2>\n<p>In this module you'll learn how to use use renaming rules to automate the renaming of entities within Dynatrace.</p>\n<p>In this module you will go through the following actions:</p>\n<ol>\n<li>Create naming rules for process groups</li>\n<li>Create naming rules for services</li>\n</ol>","activityList":[{"id":"11.1","name":"Naming Rules - Process Groups","content":"<h2 id=\"namingrulesprocessgroups\">Naming Rules - Process Groups</h2>\n<p>We will now create a new naming rule for a process group using the tagging we created previously. Let's go back to the settings in Dynatrace.</p>\n<h4 id=\"indynatraceusingtheleftnavigationmenufindsettingsundermanagesection\">In Dynatrace, using the left navigation menu find Settings under Manage section</h4>\n<ul>\n<li>Navigate to Manage  - Settings</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Settings&quot;</span> page\n</code></pre>\n<ul>\n<li>Processes and containers, Process group naming</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click on the <span class=\"hljs-string\">&quot;Processes and containers&quot;</span> section within the light gray settings menu\n   Action: Click on <span class=\"hljs-string\">&quot;Process group naming&quot;</span>\n</code></pre>\n<ul>\n<li>Add an renaming rule using: </li>\n</ul>\n<p>Kubernetes namespace â€“ exists</p>\n<p>and a new name format of:</p>\n<p>K8s | {ProcessGroup:KubernetesBasePodName} | {ProcessGroup:KubernetesNamespace}â€‹</p>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Add a new rule&quot;</span>\n   Action: Type <span class=\"hljs-string\">&quot;k8pg&quot;</span> into the <span class=\"hljs-string\">&quot;Rule name&quot;</span> field\n   Action: Copy and Paste the following format into the <span class=\"hljs-string\">&quot;Process group name format&quot;</span> field\n\n   K8s | {ProcessGroup:KubernetesBasePodName} | {ProcessGroup:KubernetesNamespace}\n\n   Action: Leave <span class=\"hljs-string\">&quot;Rule applies to entities ...&quot;</span> fields as is\n   Action: Pick <span class=\"hljs-string\">&quot;Kubernetes namespace&quot;</span> from the 1st <span class=\"hljs-string\">&quot;Condition&quot;</span> dropdown list\n   Action: Pick <span class=\"hljs-string\">&quot;exists&quot;</span> from the 2nd <span class=\"hljs-string\">&quot;Condition&quot;</span> dropdown list\n   Action: Click <span class=\"hljs-string\">&quot;Preview&quot;</span> and compare the names before and after the renaming rule is applied\n</code></pre>\n<ul>\n<li>After previewing the changes</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Create rule&quot;</span> under the preview list of matching entities\n   Action: Observe the newly renamed <span class=\"hljs-string\">&quot;Process groups&quot;</span>\n</code></pre>","activityList":[]},{"id":"11.2","name":"Naming Rules - Services","content":"<h2 id=\"namingrulesservices\">Naming Rules - Services</h2>\n<p>We will now create a new naming rule for a process group using the tagging we created previously. Let's go back to the settings in Dynatrace.</p>\n<h4 id=\"indynatraceusingtheleftnavigationmenufindsettingsundermanagesection\">In Dynatrace, using the left navigation menu find Settings under Manage section</h4>\n<ul>\n<li>Navigate to Manage  - Settings</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Look at the <span class=\"hljs-string\">&quot;Settings&quot;</span> page\n</code></pre>\n<ul>\n<li>Server-side service monitoring - Service naming rules</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click on the <span class=\"hljs-string\">&quot;Server-side service monitoring&quot;</span> section within the light gray settings menu\n   Action: Click on <span class=\"hljs-string\">&quot;Service naming rules&quot;</span>\n</code></pre>\n<ul>\n<li>Add an renaming rule using: </li>\n</ul>\n<p>Kubernetes namespace â€“ exists</p>\n<p>and a new name format of:</p>\n<p>K8s | {Service:DetectedName} | {ProcessGroup:KubernetesNamespace}â€‹â€‹</p>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Add a new rule&quot;</span>\n   Action: Type <span class=\"hljs-string\">&quot;k8svc&quot;</span> into the <span class=\"hljs-string\">&quot;Rule name&quot;</span> field\n   Action: Copy and Paste the following format into the <span class=\"hljs-string\">&quot;Service name format&quot;</span> field\n\n   K8s | {Service:DetectedName} | {ProcessGroup:KubernetesNamespace}â€‹\n\n   Action: Leave <span class=\"hljs-string\">&quot;Rule applies to entities ...&quot;</span> fields as is\n   Action: Pick <span class=\"hljs-string\">&quot;Kubernetes namespace&quot;</span> from the 1st <span class=\"hljs-string\">&quot;Condition&quot;</span> dropdown list\n   Action: Pick <span class=\"hljs-string\">&quot;exists&quot;</span> from the 2nd <span class=\"hljs-string\">&quot;Condition&quot;</span> dropdown list\n   Action: Click <span class=\"hljs-string\">&quot;Preview&quot;</span> and compare the names before and after the renaming rule is applied\n</code></pre>\n<ul>\n<li>After previewing the changes</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">   Action: Click <span class=\"hljs-string\">&quot;Create rule&quot;</span> under the preview list of matching entities\n   Action: Observe the newly renamed <span class=\"hljs-string\">&quot;Services&quot;</span>\n</code></pre>","activityList":[]}]}]